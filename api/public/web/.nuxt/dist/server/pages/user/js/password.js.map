{"version":3,"file":"pages/user/js/password.js","sources":["webpack:///./pages/user/js/password.js"],"sourcesContent":["import { amendPassword } from '@/api/login'\nexport default {\n  layout: 'user',\n  head () {\n    return {\n      title: `${this.$t('user.password')}-${this.$t('header.top.personal_center')}`,\n    }\n  },\n  data() {\n    const validateNowPassword = (rule, value, callback) => {\n      if (value === this.ruleForm.nowPassword) {\n        callback(new Error(this.$t('password.not_identical')));\n      } else {\n        callback();\n      }\n    };\n    const validatePassword = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error(this.$t('find_password.password.reenter')));\n      } else if (value !== this.ruleForm.password) {\n        callback(new Error(this.$t('find_password.password.inconformity')));\n      } else {\n        callback();\n      }\n    };\n    return {\n      loading: false,\n      ruleForm: {\n        nowPassword: '',\n        password: '',\n        rPassword: ''\n      },\n      rules: {\n        nowPassword: [\n          { required: true, message: this.$t('hint.error.import',{attribute:this.$t('password.current_password')}), trigger: 'blur' }\n        ],\n        password: [\n          { required: true, message: this.$t('hint.error.import',{attribute:this.$t('find_password.new_password')}), trigger: 'blur' },\n          { validator: validateNowPassword, trigger: 'blur' }\n        ],\n        rPassword: [\n          { required: true, message: this.$t('hint.error.import',{attribute:this.$t('find_password.confirm_password')}), trigger: 'blur' },\n          { validator: validatePassword, trigger: 'blur' }\n        ],\n      }\n    }\n  },\n  mounted() {\n\n  },\n  methods: {\n    submitForm(){\n      this.$refs['ruleForm'].validate((valid) => {\n        if (valid) {\n          this.loading = true;\n          amendPassword(this.ruleForm).then(response => {\n            this.loading = false;\n            this.$refs['ruleForm'].resetFields();\n            this.$message({\n              message: this.$t('common.success'),\n              type: 'success'\n            });\n          }).catch(() => {\n            this.loading = false\n          })\n        }\n      })\n    },\n    resetForm(formName) {\n      this.$refs[formName].resetFields();\n    }\n  }\n}\n"],"mappings":";;;;;;;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}