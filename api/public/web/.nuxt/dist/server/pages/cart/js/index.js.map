{"version":3,"file":"pages/cart/js/index.js","sources":["webpack:///./pages/cart/js/index.js"],"sourcesContent":["import {synchronizationInventory, addShoppingCart} from '@/api/goodIndent'\r\nexport default {\r\n  layout: 'cart',\r\n  head () {\r\n    return {\r\n      title: '我的购物车' + '-' + process.env.APP_NAME,\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      loading: true,\r\n      cartList: [],\r\n      cartOriginalList: [],\r\n      invalidGood: [],\r\n      total: 0,\r\n      allChecked: true,\r\n      empty: true,\r\n      multipleSelection: []\r\n    }\r\n  },\r\n  mounted() {\r\n    $nuxt.$store.commit('setCartTitle', '我的购物车');\r\n    if($nuxt.$store.state.hasLogin){\r\n      this.getList()\r\n    }\r\n  },\r\n  methods: {\r\n    async getList(){\r\n      this.loading = true;\r\n      this.cartList = []\r\n      this.invalidGood = []\r\n      await synchronizationInventory().then(response => {\r\n        this.store.set(process.env.CACHE_PR + 'CartList',response)\r\n        this.cartOriginalList = response\r\n        if(response.length>0){\r\n          this.empty = false\r\n        }else{\r\n          this.empty = true\r\n        }\r\n        for(let k in response){\r\n          if(response[k].good_sku){\r\n            response[k].specification = ''\r\n            response[k].good_sku.skus.forEach(item=>{\r\n              if(response[k].specification){\r\n                response[k].specification+= item.v + ';'\r\n              }else{\r\n                response[k].specification = item.v + ';'\r\n              }\r\n            })\r\n            response[k].specification = response[k].specification.substr(0,response[k].specification.length-1)\r\n          }\r\n          if(response[k].good.is_delete === 1 || response[k].good.is_show !== 1){\r\n            response[k].invalid = true\r\n          }\r\n          if(response[k].invalid === true){ //失效的商品\r\n            this.invalidGood.push({\r\n              ...response[k],\r\n              index: k\r\n            })\r\n          }else{\r\n            this.cartList.push({\r\n              ...response[k],\r\n              index: k\r\n            })\r\n          }\r\n        }\r\n        this.$nextTick(()=>{\r\n          if(this.empty === false){\r\n            this.handleCheckAllChange()\r\n          }\r\n        })\r\n        this.loading = false;\r\n      }).catch(() => {\r\n        this.loading = false\r\n      })\r\n\r\n    },\r\n    calcTotal(){\r\n      let list = this.multipleSelection;\r\n      let total = 0;\r\n      list.forEach(item=>{\r\n        total += item.price * item.number;\r\n      })\r\n      this.total = Number(total.toFixed(2));\r\n    },\r\n    handleSelectionChange(val){\r\n      this.multipleSelection = val\r\n      this.calcTotal();\r\n    },\r\n    handleCheckAllChange() {\r\n      this.$refs.table.toggleAllSelection()\r\n      this.calcTotal();\r\n    },\r\n    //创建订单\r\n    createOrder(){\r\n      if(this.multipleSelection.length <=0){\r\n        this.$message({\r\n          message: '请选择商品',\r\n          type: 'error'\r\n        });\r\n      }else{\r\n        this.store.set(process.env.CACHE_PR + 'OrderList',this.multipleSelection)\r\n        $nuxt.$router.push('/indent/create');\r\n      }\r\n    },\r\n    //修改数量\r\n    numberChange(index){\r\n      this.cartOriginalList[index].number =  this.cartList[index].number\r\n      this.store.set(process.env.CACHE_PR + 'CartList',this.cartOriginalList)\r\n      addShoppingCart(this.cartOriginalList)\r\n      this.calcTotal();\r\n    },\r\n    //删除失效的商品\r\n    deleteInvalidGood(index){\r\n      this.$confirm('是否移除该商品？', '提示', {\r\n        confirmButtonText: '确认',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n      }).then(() => {\r\n        this.cartOriginalList.splice(this.invalidGood[index].index, 1)\r\n        if(Object.values(this.cartOriginalList).length > 0){\r\n          this.store.set(process.env.CACHE_PR + 'CartList',this.cartOriginalList)\r\n        }else{\r\n          this.store.remove(process.env.CACHE_PR + 'CartList')\r\n        }\r\n        addShoppingCart(this.cartOriginalList).then(() => {\r\n          this.getList();\r\n        })\r\n        this.invalidGood.splice(index, 1);\r\n      }).catch(() => {\r\n      })\r\n    },\r\n    //删除\r\n    deleteCartItem(index){\r\n      this.$confirm('是否移除该商品？', '提示', {\r\n        confirmButtonText: '确认',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n      }).then(() => {\r\n        this.cartOriginalList.splice(this.cartList[index].index, 1)\r\n        if(Object.values(this.cartOriginalList).length > 0){\r\n          this.store.set(process.env.CACHE_PR + 'CartList',this.cartOriginalList)\r\n        }else{\r\n          this.store.remove(process.env.CACHE_PR + 'CartList')\r\n        }\r\n        addShoppingCart(this.cartOriginalList).then(() => {\r\n          this.getList();\r\n        })\r\n        this.cartList.splice(index, 1);\r\n      }).catch(() => {\r\n      })\r\n    },\r\n    //删除选中的商品\r\n    clearCart(){\r\n      this.$confirm('是否移除所选商品？', '提示', {\r\n        confirmButtonText: '确认',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n      }).then(() => {\r\n        this.multipleSelection.forEach(item=>{\r\n          this.cartList.forEach((item2,index)=>{\r\n            if(item.good_sku_id){\r\n              if(item.good_sku_id === item2.good_sku_id){\r\n                delete this.cartOriginalList[item2.index]\r\n                this.cartList.splice(index, 1);\r\n              }\r\n            }else{\r\n              if(item.good_id === item2.good_id){\r\n                delete this.cartOriginalList[item2.index]\r\n                this.cartList.splice(index, 1);\r\n              }\r\n            }\r\n          })\r\n        })\r\n        this.cartOriginalList = this.cartOriginalList.filter((res) => {\r\n          return res;\r\n        })\r\n        if(Object.values(this.cartOriginalList).length > 0){\r\n          this.store.set(process.env.CACHE_PR + 'CartList',this.cartOriginalList)\r\n        }else{\r\n          this.store.remove(process.env.CACHE_PR + 'CartList')\r\n        }\r\n        addShoppingCart(this.cartOriginalList).then(() => {\r\n          this.getList();\r\n        })\r\n      }).catch(() => {\r\n      })\r\n    },\r\n  }\r\n}\r\n"],"mappings":";;;;;;;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAFA;AAIA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAlKA;AAzBA;;;;A","sourceRoot":""}