{"version":3,"file":"pages/comment/js/score.js","sources":["webpack:///./api/comment.js","webpack:///./pages/comment/js/score.js"],"sourcesContent":["import request from '@/plugins/request'\r\nimport Qs from 'qs'\r\nexport function detail(id) {\r\n  return request({\r\n    url: 'comment/detail/' + id,\r\n    method: 'GET'\r\n  })\r\n}\r\nexport function good(query) {\r\n  return request({\r\n    url: 'comment/good',\r\n    method: 'GET',\r\n    params: query\r\n  })\r\n}\r\nexport function create(id, data) {\r\n  data = Qs.parse(data)\r\n  return request({\r\n    url: 'comment/' + id,\r\n    method: 'POST',\r\n    data\r\n  })\r\n}\r\n","import {detail, create} from '@/api/comment'\r\nimport { getToken } from '@/plugins/auth'\r\nexport default {\r\n  layout: 'user',\r\n  head () {\r\n    return {\r\n      title: '订单评价-订单详情-个人中心',\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      loading: true,\r\n      buttonLoading: false,\r\n      total: 0,\r\n      indent:{\r\n        list: []\r\n      },\r\n      url: process.env.API_URL + 'uploadPictures',\r\n      imgHeaders: {\r\n        'apply-secret': process.env.PROJECT_KEY,\r\n        'Authorization': 'Bearer ' + getToken('token')\r\n      },\r\n      imgData: {\r\n        type: 1,\r\n        size: 1024 * 1024 * 2,\r\n        specification: [80, 150]\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    console.log('111')\r\n    this.getDetail()\r\n  },\r\n  methods: {\r\n    async getDetail(){\r\n\r\n      if(!$nuxt.$route.query.id){\r\n\r\n      }\r\n      await Promise.all([\r\n        detail($nuxt.$route.query.id)\r\n      ]).then(([indentData]) => {\r\n        indentData.forEach((item,index)=>{\r\n          this.indent.list.push(\r\n            {\r\n              ...item,\r\n              score: null,\r\n              details: null,\r\n              resources: [],\r\n              anonymity: 0,\r\n              id:item.id\r\n            }\r\n          )\r\n        })\r\n        this.loading = false\r\n      }).catch((error) => {\r\n        this.loading = false\r\n      })\r\n    },\r\n    // 图片列表上传成功\r\n    handleAvatarSuccessList(res, file, fileList, index) {\r\n      this.indent.list[index].resources = fileList\r\n      this.imgProgress = false\r\n      this.imgProgressPercent = 0\r\n    },\r\n    handleRemove(file, fileList, index) {\r\n      this.indent.list[index].resources = fileList\r\n    },\r\n    // 图片列表图片格式大小验证\r\n    beforeAvatarUploadList(file) {\r\n      const isLt2M = file.size / 1024 / 1024 < 2\r\n      if (\r\n        ['image/jpeg',\r\n          'image/gif',\r\n          'image/png',\r\n          'image/bmp'\r\n        ].indexOf(file.type) === -1) {\r\n        this.$message.error('请上传正确的图片格式')\r\n        return false\r\n      }\r\n      if (!isLt2M) {\r\n        this.$message.error('上传头像图片大小不能超过 2MB!')\r\n      }\r\n      return isLt2M\r\n    },\r\n    goBack() {\r\n      $nuxt.$router.go(-1)\r\n    },\r\n    // 提交\r\n    addComment() {\r\n      this.$refs['ruleForm'].validate((valid) => {\r\n        if (valid) {\r\n          this.buttonLoading = true;\r\n          let list = JSON.parse(JSON.stringify(this.indent.list))\r\n          for (let i = 0; i <list.length; i++) {\r\n            if(list[i].score === 0) {\r\n              this.$message.error('您还有未选择的星级评分')\r\n              this.buttonLoading = false\r\n              return false\r\n            }\r\n            list[i].resources = list[i].resources.map(item => { return item.response })\r\n          }\r\n          create($nuxt.$route.query.id, list).then(response => {\r\n            $nuxt.$router.go(-1)\r\n          }).catch(() => {\r\n            this.buttonLoading = false\r\n          })\r\n        } else {\r\n          return false;\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n"],"mappings":";;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;;;;;;;;ACtBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAZA;AAkBA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/EA;AA/BA;;;;A","sourceRoot":""}