{"version":3,"file":"pages/pass/js/findPassword.js","sources":["webpack:///./pages/pass/js/findPassword.js"],"sourcesContent":["import {cellphoneCode, findPassword} from '@/api/login'\r\nexport default {\r\n  layout: 'login',\r\n  head () {\r\n    return {\r\n      title: this.$t('ind_password.title') + '-' + process.env.APP_NAME\r\n    }\r\n  },\r\n  data() {\r\n    const validateCellphone = (rule, value, callback) => {\r\n      if (value === '') {\r\n        callback(new Error(this.$t('hint.error.import', {attribute: this.$t('find_password.cellphone')})));\r\n      } else {\r\n        const myreg = /^1[3456789]\\d{9}$/;\r\n        if (!myreg.test(value)) {\r\n          callback(new Error(this.$t('hint.error.wrong_format', {attribute: this.$t('find_password.cellphone')})));\r\n        }\r\n        callback();\r\n      }\r\n    };\r\n    const validatePass = (rule, value, callback) => {\r\n      if (value === '') {\r\n        callback(new Error(this.$t('find_password.password.reenter')));\r\n      } else if (value !== this.ruleForm.password) {\r\n        callback(new Error(this.$t('find_password.password.inconformity')));\r\n      } else {\r\n        callback();\r\n      }\r\n    };\r\n    return {\r\n      ruleForm: {\r\n        cellphone: '',\r\n        password: '',\r\n        code: '',\r\n        rPassword: '',\r\n        state: 1\r\n      },\r\n      codename:this.$t('find_password.get_code'),\r\n      seconds: '',\r\n      unit: '',\r\n      loading: false,\r\n      codeDisabled: false,\r\n      rules: {\r\n        cellphone: [\r\n          { validator: validateCellphone, trigger: 'blur' }\r\n        ],\r\n        password: [\r\n          { required: true, message: this.$t('hint.error.import', {attribute: this.$t('find_password.password')}), trigger: 'blur' },\r\n          { min: 5, message: this.$t('find_password.password.length'), trigger: 'blur' }\r\n        ],\r\n        code: [\r\n          { required: true, message: this.$t('hint.error.import', {attribute: this.$t('find_password.verification_code')}), trigger: 'blur' },\r\n          { type: 'number', message: this.$t('find_password.verification_code.number', {attribute: this.$t('find_password.verification_code')})}\r\n        ],\r\n        rPassword: [\r\n          { validator: validatePass, trigger: 'blur' }\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    // 获取验证码\r\n    getCode(){\r\n      const that = this;\r\n      cellphoneCode(this.ruleForm).then(response => {\r\n        // 开始倒计时\r\n        this.seconds = 60;\r\n        this.codename = '';\r\n        this.unit = 's';\r\n        this.codeDisabled = true;\r\n        this.timer = setInterval(function () {\r\n          that.seconds = that.seconds - 1;\r\n          if (that.seconds === 0) {\r\n            // 读秒结束 清空计时器\r\n            clearInterval(that.timer);\r\n            that.seconds = '';\r\n            that.codename = this.$t('find_password.get_code');\r\n            that.unit = '';\r\n            that.codeDisabled = false\r\n          }\r\n        }, 1000)\r\n        // 模拟短信发送\r\n        if(response.code){\r\n          that.ruleForm.code = response.code\r\n        }\r\n      }).catch(() => {\r\n\r\n      })\r\n    },\r\n    submitForm(){\r\n      this.$refs['ruleForm'].validate((valid) => {\r\n        if (valid) {\r\n          this.loading = true;\r\n          findPassword(this.ruleForm).then(() => {\r\n            this.$message({\r\n              message: this.$t('find_password.reset_successfully'),\r\n              type: 'success'\r\n            });\r\n            this.loading = false;\r\n            $nuxt.$router.replace('/pass/login')\r\n          }).catch(() => {\r\n            this.loading = false\r\n          })\r\n        }\r\n      })\r\n    }\r\n  }\r\n}\r\n"],"mappings":";;;;;;;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}