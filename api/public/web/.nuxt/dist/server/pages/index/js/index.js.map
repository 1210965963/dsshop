{"version":3,"file":"pages/index/js/index.js","sources":["webpack:///./api/good.js","webpack:///./pages/seckill/components/CountDownTime.vue?93d8","webpack:///./pages/seckill/components/CountDownTime.vue","webpack:///./pages/seckill/components/CountDownTime.vue?782a","webpack:///./pages/seckill/components/CountDownTime.vue?368f","webpack:///./api/seckill.js","webpack:///./api/banner.js","webpack:///./pages/index/js/index.js"],"sourcesContent":["import request from '@/plugins/request'\r\nexport function getList(query) {\r\n  return request({\r\n    url: 'good',\r\n    method: 'GET',\r\n    params: query\r\n  })\r\n}\r\nexport function detail(id) {\r\n  return request({\r\n    url: 'good/' + id,\r\n    method: 'GET'\r\n  })\r\n}\r\nexport function goodCategory(query) {\r\n  return request({\r\n    url: 'goodCategory',\r\n    method: 'GET',\r\n    params: query\r\n  })\r\n}\r\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_vm._t(\"default\",null,null,{\n    d: _vm.days,\n    h: _vm.hours,\n    m: _vm.mins,\n    s: _vm.seconds,\n    hh: (\"00\" + _vm.hours).slice(-2),\n    mm: (\"00\" + _vm.mins).slice(-2),\n    ss: (\"00\" + _vm.seconds).slice(-2)\n  })],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nexport default {\r\n  name: 'BaseCounter',\r\n  props: {\r\n    // 后台返回的时间戳\r\n    time: {\r\n      type: Number | String,\r\n      default: 0\r\n    },\r\n    refreshCounter: {\r\n      type: Number | String,\r\n      default: 0\r\n    },\r\n    // 到期时间\r\n    end: {\r\n      type: Number | String,\r\n      default: 0\r\n    },\r\n    // 区分传入的事秒还是毫秒\r\n    isMiniSecond: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    // 将获取到的时候进行转化，不管time是毫秒还是秒都转化成秒\r\n    // 「+」’号。接口返回的一串数字有时候是字符串的形式，有时候是数字的形式（~不能过分相信后端同学，必须自己做好防范~）。所以通过前面加个‘「+」’号 通通转化为数字。\r\n    duration() {\r\n      // 处理传入到期时间\r\n      if (this.end) {\r\n        let end = String(this.end).length >= 13 ? +this.end : +this.end * 1000\r\n        end -= Date.now()\r\n        return end\r\n      }\r\n      // 处理入剩余时间\r\n      return this.isMiniSecond ? Math.round(+this.time / 1000) : Math.round(+this.time)\r\n    }\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      days: '0',\r\n      hours: '00',\r\n      mins: '00',\r\n      seconds: '00',\r\n      timer: null,\r\n      curTime: 0 // 当前的时刻，也就是显示在页面上的那个时刻\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    // 将duration转化成天数，小时，分钟，秒数的方法\r\n    durationFormatter(time) {\r\n      if (!time) return {ss: 0};\r\n      let t = time;\r\n      const ss = t % 60;\r\n      t = (t - ss) / 60;\r\n      if (t < 1) return {ss};\r\n      const mm = t % 60\r\n      t = (t - mm) / 60\r\n      if (t < 1) return {mm, ss}\r\n      const hh = t % 24\r\n      t = (t - hh) / 24\r\n      if (t < 1) return {hh, mm, ss}\r\n      const dd = t\r\n      return {dd, hh, mm, ss}\r\n    },\r\n    // 开始执行倒计时的方法\r\n    countDown() {\r\n      // 记录下当前时间\r\n      this.curTime = Date.now()\r\n      this.getTime(this.duration)\r\n    },\r\n    // 倒计时方法\r\n    getTime(time) {\r\n      this.timer && clearTimeout(this.timer)\r\n      if (time < 0){\r\n        this.$emit('end', true)\r\n        return\r\n      }\r\n      const {dd, hh, mm, ss} = this.durationFormatter(time)\r\n      this.days = dd || 0\r\n      this.hours = hh || 0\r\n      this.mins = mm || 0\r\n      this.seconds = ss || 0\r\n      this.timer = setTimeout(() => {\r\n        /*\r\n          出于节能的考虑, 部分浏览器在进入后台时(或者失去焦点时), 「会将 setTimeout 等定时任务暂停 待用户回到浏览器时, 才会重新激活定时任务」\r\n          说是暂停, 其实应该说是延迟, 1s 的任务延迟到 2s, 2s 的延迟到 5s, 实际情况因浏览器而异。\r\n          原来如此，看来不能每次都只是减1这么简单了（毕竟你把浏览器切到后台之后setTimeout就冷却了，等几秒后切回，然后执行setTimeout，只是减了一秒而已）。\r\n        */\r\n        // now 是 setTimeout的回调函数执行的时候的那个时刻。记录当前这个setTimeout的回调函数执行的时间点。\r\n        const now = Date.now()\r\n        // 当前这个setTimeout的回调函数执行的时刻距离上 页面上的剩余时间上一次变化的时间段」。其实也就是 「当前这个setTimeout的回调函数执行的时刻距离上 一个setTimeout的回调函数执行的时刻时间段。」\r\n        // 记录当前这个setTimeout的回调函数执行的时间点距离页面上开始 渲染 剩余时间的 这一段时间。其实此时的diffTime就是=1。\r\n        const diffTime = Math.floor((now - this.curTime) / 1000)\r\n        // 在手机端页面回退到后台的时候不会计时，对比时间差，大于1s的重置倒计时\r\n        const step = diffTime > 1 ? diffTime : 1\r\n        // 将curTime的值变成当前这个setTimeout的回调函数执行的时间点。\r\n        this.curTime = now\r\n        this.getTime(time - step)\r\n      }, 1000)\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    this.countDown()\r\n  },\r\n\r\n  watch: {\r\n    duration() {\r\n      this.countDown()\r\n    },\r\n    refreshCounter() {\r\n      this.countDown()\r\n    }\r\n  }\r\n}\r\n\r\n/*\r\n  // 原创连接https://mp.weixin.qq.com/s/Edk-0pVDZWOkkfZ2mPiCnw\r\n  总结：\r\n    1、 为什么要「用setTimeout来模拟setInterval的行为」？\r\n        可以看看setInterval有什么缺点：\r\n        定时器指定的时间间隔，表示的是何时将定时器的代码添加到消息队列，而不是合适执行代码，所以真正何时执行代码的时间是不能保证的，而是取决于何时被主线程的事件循环取到并执行。\r\n        setInterval(fun, n) // 每隔n秒把fun事件推到消息队列中；\r\n        setInterval有两个缺点：（1）使用setInterval时，某些间隔会被跳过；（2）可能有多个定时器会连续执行；\r\n        可以这么理解：每个setTimeout产生的任务会直接push到任务队列中，而setInterval在每次把任务push到任务队列前，都要进行一下判断看上次的任务是否仍在队列中；因而采用setTimeout来规避上面的缺点。\r\n\r\n    2、为什么要clearTimeout(this.timer)\r\n        假设现在页面显示的是活动一的时间，这时，执行到setTimeout，在「一秒后」就会把setTimeout里的回调函数放到任务队列中，「注意是一秒后哦」！这时，然而，在这一秒的开头，我们点击了活动二按钮，这时候的活动二的时间就会传入倒计时组件中，然后触发countDown(),也就调用this.getTime(this.duration);，然后执行到setTimeout，也会一秒后把回调函数放到任务队列中。\r\n        这时，任务队列中就会有两个setTimeout的回调函数了。等待一秒过去，两个回调函数相继执行，我们就会看到页面上的时间一下子背减了2，实际上是很快速地进行了两遍减1的操作。\r\n        这就是为什么要添加上this.timer && clearTimeout(this.timer);这一句的原因了。就是要把上一个setTimeout清除掉。\r\n*/\r\n\r\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--2-0!../../../node_modules/@nuxt/components/dist/loader.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./CountDownTime.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--2-0!../../../node_modules/@nuxt/components/dist/loader.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./CountDownTime.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./CountDownTime.vue?vue&type=template&id=8477b946&\"\nimport script from \"./CountDownTime.vue?vue&type=script&lang=js&\"\nexport * from \"./CountDownTime.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"c92fe214\"\n  \n)\n\nexport default component.exports","import request from '@/plugins/request'\r\nexport function getList(query) {\r\n  return request({\r\n    url: 'seckill',\r\n    method: 'GET',\r\n    params: query\r\n  })\r\n}\r\nexport function detail(id) {\r\n  return request({\r\n    url: 'seckill/' + id,\r\n    method: 'GET'\r\n  })\r\n}\r\n","import request from '@/plugins/request'\r\nexport function getList(query) {\r\n  return request({\r\n    url: 'banner',\r\n    method: 'GET',\r\n    params: query\r\n  })\r\n}\r\n","import {getList as getGoodList, goodCategory} from '@/api/good'\r\nimport {getList as bannerList} from '@/api/banner'\r\nimport moment from 'moment'\r\nimport CountDownTime from '@/pages/seckill/components/CountDownTime';\r\nimport {getList as seckillList} from '@/api/seckill'\r\nimport {verifyPlugin} from '@/api/plugin'\r\nexport default {\r\n  components: {\r\n    CountDownTime\r\n  },\r\n  data() {\r\n    return {\r\n      categoryStyle: 0,\r\n      naveOn: null,\r\n      goodList: [],\r\n      banner: '',\r\n      bannerList: [],\r\n      categoryList: [],\r\n      categorySublevel:[],\r\n      recommendCategoryList: [],\r\n      recommendGoodList: [],\r\n      isSeckill: false,\r\n      seckill: [],\r\n      seckillTime: 0,\r\n      seckillActiveTime: '',\r\n      seckillLoading: false\r\n    }\r\n  },\r\n  async asyncData (ctx) {\r\n    try {\r\n      let time = moment().format('YYYY-MM-DD HH:00:00')\r\n      if(moment().format('HH')%2 !== 0){\r\n        time = moment().subtract(1, 'hour').format('YYYY-MM-DD HH:00:00')\r\n      }\r\n      let endTime = (moment(time, \"YYYY-MM-DD HH:00:00\").add(2, 'hour')-moment().valueOf())/1000\r\n      let [goodData, bannerData, categoryData, recommendCategoryData, verifyPluginData] = await Promise.all([\r\n        getGoodList({\r\n          limit: 10,\r\n          is_recommend: 1\r\n        }),\r\n        bannerList({\r\n          limit: 5,\r\n          type: 0,\r\n          state: 0,\r\n          sort: '+sort'\r\n        }),\r\n        goodCategory({\r\n          tree: true\r\n        }),\r\n        goodCategory({\r\n          is_recommend: 1\r\n        }),\r\n        verifyPlugin(['seckill'])\r\n      ])\r\n      bannerData.data.forEach(item=>{\r\n        item.url = item.url ? item.url.replace('?id=','/') : ''\r\n      })\r\n      return {\r\n        goodList: goodData.data,\r\n        bannerList: bannerData.data,\r\n        categoryList: categoryData,\r\n        recommendCategoryList: recommendCategoryData,\r\n        seckillActiveTime: moment(time, \"YYYY-MM-DD HH:00:00\").format('HH:00'),\r\n        seckillTime: endTime,\r\n        isSeckill: verifyPluginData.seckill,\r\n      }\r\n    } catch(err) {\r\n      ctx.$errorHandler(err)\r\n    }\r\n  },\r\n  mounted() {\r\n    this.categoryGood();\r\n    this.getBanner()\r\n    if(this.isSeckill){\r\n      this.endSeckillTime()\r\n    }\r\n  },\r\n  methods: {\r\n    // 分类切换\r\n    naveCut(index){\r\n      if(index !== -1){\r\n        this.naveOn = index;\r\n        if(this.categoryList[index].children){ //存在子类目\r\n          if(this.categoryList[index].children[0].resources){\r\n            this.categorySublevel = this.categoryList[index].children;\r\n            this.categoryStyle = 2\r\n          }else{  //存在三级\r\n            this.categorySublevel = this.categoryList[index].children;\r\n            this.categoryStyle = 1\r\n          }\r\n        }else{\r\n          this.categorySublevel = []\r\n        }\r\n      }\r\n    },\r\n    // 获取分类商品\r\n    categoryGood() {\r\n      this.recommendCategoryList.forEach((item,index)=>{\r\n        this.recommendGoodList[index] = []\r\n        getGoodList({\r\n          limit: 10,\r\n          category_id: item.id\r\n        }).then(response => {\r\n          this.recommendGoodList[index] = response.data\r\n          this.$forceUpdate()\r\n        })\r\n      })\r\n    },\r\n    // 分类移出\r\n    naveShiftOut(){\r\n      this.naveOn = null;\r\n      this.categoryStyle = 0\r\n    },\r\n    // 首页广告\r\n    getBanner(){\r\n      bannerList({\r\n        limit: 1,\r\n        type: 1,\r\n        state: 0,\r\n        sort: '+sort'\r\n      }).then(response => {\r\n        this.banner = response.data[0]\r\n        this.banner.url = this.banner.url ? this.banner.url.replace('?id=','/') : ''\r\n      })\r\n    },\r\n    // 秒杀倒计时结束\r\n    endSeckillTime() {\r\n      this.seckillLoading = true\r\n      let time = moment().format('YYYY-MM-DD HH:00:00')\r\n      if(moment().format('HH')%2 !== 0){\r\n        time = moment().subtract(1, 'hour').format('YYYY-MM-DD HH:00:00')\r\n      }\r\n      this.seckillActiveTime = moment(time, \"YYYY-MM-DD HH:00:00\").format('HH:00')\r\n      this.seckillTime = (moment(time, \"YYYY-MM-DD HH:00:00\").add(2, 'hour')-moment().valueOf())/1000\r\n      seckillList({\r\n        limit: 5,\r\n        time: time,\r\n        sort: '-id',\r\n        state: 1\r\n      }).then(response => {\r\n        this.seckill = response.data\r\n      }).finally(()=>{\r\n        this.seckillLoading = false\r\n      })\r\n    }\r\n  }\r\n}\r\n"],"mappings":";;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAFA;AAhBA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAbA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAQA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArDA;AACA;AAsDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAPA;AA7GA;AAuHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrJA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAFA;AAIA;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAgBA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAJA;AAOA;AADA;AAIA;AADA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AApEA;AAvEA;;;;A","sourceRoot":""}