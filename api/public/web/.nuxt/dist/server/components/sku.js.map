{"version":3,"file":"components/sku.js","sources":["webpack:///./components/Sku/utils.js","webpack:///./components/Sku/index.vue?88f1","webpack:///./plugins/index.js","webpack:///./components/Sku/sku2param.js","webpack:///./components/Sku/js/index.js","webpack:///./components/Sku/index.vue?3b05","webpack:///./components/Sku/index.vue?d18e","webpack:///./components/Sku/index.vue?e273","webpack:///./components/Sku/index.vue","webpack:///./components/Sku/index.vue?9ec0","webpack:///./components/Sku/index.vue?ff93"],"sourcesContent":["// skus: [{\"k_id\":1,\"k\":\"颜色\",\"v_id\":11,\"v\":\"红色\"},{\"k_id\":2,\"k\":\"尺寸\",\"v_id\":22,\"v\":\"小\"}],\r\n// output：1-11_2-22\r\nexport const creatIds = skus => skus.reduce((total, prev, index) => `${total}${prev.k_id}-${prev.v_id}${index === skus.length - 1 ? '' : '_'}`, '')\r\n\r\n// 计算每个sku后面有多少项\r\nexport function getLevels(tree) {\r\n  const level = []\r\n  for (let i = tree.length - 1; i >= 0; i--) {\r\n    if (tree[i + 1] && tree[i + 1].leaf) {\r\n      level[i] = tree[i + 1].leaf.length * level[i + 1] || 1\r\n    } else {\r\n      level[i] = 1\r\n    }\r\n  }\r\n  return level\r\n}\r\n\r\n/**\r\n * 笛卡尔积运算\r\n * @param  {[type]} tree   [description]\r\n * @param  {Array}  stocks [description]\r\n * @return {[type]}        [description]\r\n */\r\nexport function flatten(tree, stocks = [], options) {\r\n  const { optionValue = 'id', optionText = 'value' } = options || {}\r\n  const result = []\r\n  let skuLen = 0\r\n  const stockMap = {} // 记录已存在的stock的数据\r\n  const level = getLevels(tree)\r\n  if (tree.length === 0) return result\r\n  tree.forEach(sku => {\r\n    const { leaf } = sku\r\n    if (!leaf || leaf.length === 0) return true\r\n    skuLen = (skuLen || 1) * leaf.length\r\n  })\r\n  // 根据已有的stocks生成一个map\r\n  stocks.forEach(stock => {\r\n    const { skus, ...attr } = stock\r\n    stockMap[skus.map(item => `${item.k_id}_${item.v_id}`).join('|')] = attr\r\n  })\r\n  for (let i = 0; i < skuLen; i++) {\r\n    const skus = []\r\n    const mapKey = []\r\n    tree.forEach((sku, column) => {\r\n      const { leaf } = sku\r\n      let item = {}\r\n      if (!leaf || leaf.length === 0) return true\r\n      if (leaf.length > 1) {\r\n        const row = parseInt(i / level[column], 10) % leaf.length\r\n        item = tree[column].leaf[row]\r\n      } else {\r\n        item = tree[column].leaf[0]\r\n      }\r\n      if (!sku[optionValue] || !item[optionValue]) return\r\n      mapKey.push(`${sku[optionValue]}_${item[optionValue]}`)\r\n      skus.push({\r\n        k_id: sku[optionValue],\r\n        k: sku[optionText],\r\n        v_id: item[optionValue],\r\n        v: item[optionText]\r\n      })\r\n    })\r\n    const { ...data } = stockMap[mapKey.join('|')] || {}\r\n    // 从map中找出存在的sku并保留其值\r\n    result.push({ ...data, skus })\r\n  }\r\n  return result\r\n}\r\n\r\n/**\r\n * 判断两个sku是否相同\r\n * @param  {[type]}  prevSKU [description]\r\n * @param  {[type]}  nextSKU [description]\r\n * @return {Boolean}         [description]\r\n */\r\nexport function isEqual(prevSKU, nextSKU, options) {\r\n  const { optionValue = 'id' } = options || {}\r\n  return (\r\n    nextSKU.length === prevSKU.length &&\r\n    nextSKU.every(({ leaf = [] }, index) => {\r\n      const prevLeaf = prevSKU[index].leaf || []\r\n      return (\r\n        prevSKU[index][optionValue] === nextSKU[index][optionValue] &&\r\n        leaf.length === prevLeaf.length &&\r\n        leaf.map(item => item[optionValue]).join(',') ===\r\n          prevLeaf.map(item => item[optionValue]).join(',')\r\n      )\r\n    })\r\n  )\r\n}\r\n\r\n\r\n/**\r\n * 从数组中生成指定长度的组合\r\n * 方法: 先生成[0,1...]形式的数组, 然后根据0,1从原数组取元素，得到组合数组\r\n */\r\nexport function combInArray(aData) {\r\n\tif(!aData || !aData.length) {\r\n\t\treturn [];\r\n\t}\r\n\r\n\tvar len = aData.length;\r\n\tvar aResult = [];\r\n\tvar ids = []\r\n\tfor(var n = 1; n < len; n++) {\r\n\t\tvar aaFlags = getCombFlags(len, n);\r\n\t\t\r\n\t\twhile(aaFlags.length) {\r\n\t\t\tvar aFlag = aaFlags.shift();\r\n\t\t\tvar aComb = [];\r\n\t\t\tfor(var i = 0; i < len; i++) {\r\n\t\t\t\taFlag[i] && aComb.push(aData[i]['v_id']);\r\n\t\t\t}\r\n\t\t\taResult.push(aComb);\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t}\r\n\tfor(var n = 0; n < len; n++) {\r\n\t\tids.push(aData[n].v_id)\r\n\t}\r\n\taResult.push(ids)\r\n\treturn aResult;\r\n}\r\n\r\n\r\n/**\r\n * 得到从 m 元素中取 n 元素的所有组合\r\n * 结果为[0,1...]形式的数组, 1表示选中，0表示不选\r\n */\r\nexport function getCombFlags(m, n) {\r\n\tif(!n || n < 1) {\r\n\t\treturn [];\r\n\t}\r\n\r\n\tvar aResult = [];\r\n\tvar aFlag = [];\r\n\tvar bNext = true;\r\n\tvar i, j, iCnt1;\r\n\r\n\tfor (i = 0; i < m; i++) {\r\n\t\taFlag[i] = i < n ? 1 : 0;\r\n\t}\r\n\r\n\taResult.push(aFlag.concat());\r\n\r\n\twhile (bNext) {\r\n\t\tiCnt1 = 0;\r\n\t\tfor (i = 0; i < m - 1; i++) {\r\n\t\t\tif (aFlag[i] == 1 && aFlag[i+1] == 0) {\r\n\t\t\t\tfor(j = 0; j < i; j++) {\r\n\t\t\t\t\taFlag[j] = j < iCnt1 ? 1 : 0;\r\n\t\t\t\t}\r\n\t\t\t\taFlag[i] = 0;\r\n\t\t\t\taFlag[i+1] = 1;\r\n\t\t\t\tvar aTmp = aFlag.concat();\r\n\t\t\t\taResult.push(aTmp);\r\n\t\t\t\tif(aTmp.slice(-n).join(\"\").indexOf('0') == -1) {\r\n\t\t\t\t\tbNext = false;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\taFlag[i] == 1 && iCnt1++;\r\n\t\t}\r\n\t}\r\n\treturn aResult;\r\n} \r\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--7-oneOf-1-3!../../node_modules/sass-resources-loader/lib/loader.js??ref--7-oneOf-1-4!../../node_modules/@nuxt/components/dist/loader.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=style&index=0&id=6280261e&lang=scss&scoped=true&\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add CSS to SSR context\nvar add = require(\"!../../node_modules/vue-style-loader/lib/addStylesServer.js\").default\nmodule.exports.__inject__ = function (context) {\n  add(\"23af186a\", content, true, context)\n};","/** +----------------------------------------------------------------------\r\n * | DSSHOP [ 轻量级易扩展低代码开源商城系统 ]\r\n * +----------------------------------------------------------------------\r\n * | Copyright (c) 2020~2023 https://www.dswjcms.com All rights reserved.\r\n * +----------------------------------------------------------------------\r\n * | Licensed 未经许可不能去掉DSSHOP相关版权\r\n * +----------------------------------------------------------------------\r\n * | Author: Purl <383354826@qq.com>\r\n * +----------------------------------------------------------------------\r\n */\r\nexport function createUniqueString() {\r\n\tconst randomNum = parseInt((1 + Math.random()) * 65536) + ''\r\n\treturn (randomNum + new Date().getMilliseconds())\r\n}\r\n","import {\r\n  createUniqueString\r\n} from '../../plugins'\r\nimport {\r\n  creatIds,\r\n  combInArray\r\n} from './utils'\r\n\r\nfunction objectValues(obj) {\r\n    var res = [];\r\n    for (var i in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, i)) {\r\n            res.push(obj[i]);\r\n        }\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function param2Data(product_skus_data) {\r\n  // product_skus_data 数据结构请参考 `/src/components/mock.js`\r\n  if (!product_skus_data || !product_skus_data.length) return\r\n  const specificationObj = {}\r\n\r\n  // 储存所有 spec 的随机生成的 id\r\n  const spec_id_dict = {\r\n    // '颜色': 'xxxid',\r\n    // '皮质': 'xxxid',\r\n  }\r\n\r\n  // 储存所有 option 的随机生成的 id\r\n  const option_id_dict = {\r\n    // '红色': 'xxxid',\r\n    // '绿色': 'xxxid',\r\n    // '蓝色': 'xxxid',\r\n    // '一级皮': 'xxxid',\r\n    // '二级皮': 'xxxid',\r\n    // '三级皮': 'xxxid',\r\n  }\r\n  const productSkus = product_skus_data.map(item => {\r\n    const skusObj = {\r\n      ...item,\r\n      product_sku_id: item.id,\r\n      skus: item.product_sku.map((sku,index) => {\r\n        // const spec_random_id = createUniqueString() + '_id'\r\n        // const option_random_id = createUniqueString() + '_id'\r\n\t\tconst spec_random_id = 'sku' + createUniqueString()\r\n\t\tconst option_random_id = 'sku' + createUniqueString()\r\n        // 加上 if ，防止 dict 里的 id 被覆盖，每次只记录第一次生成的 id\r\n        if (!spec_id_dict[sku.key]) spec_id_dict[sku.key] = spec_random_id\r\n        if (!option_id_dict[sku.value]) option_id_dict[sku.value] = option_random_id\r\n        const sepc_id = spec_id_dict[sku.key]\r\n        const option_id = option_id_dict[sku.value]\r\n\r\n        specificationObj[sku.key] = {\r\n          value: sku.key,\r\n          id: sepc_id,\r\n          leaf: {\r\n            ...(specificationObj[sku.key] ? specificationObj[sku.key].leaf : {}),\r\n            [sku.value]: {\r\n              value: sku.value,\r\n              id: option_id,\r\n\t\t\t  selected: false,\r\n\t\t\t  disabled: false\r\n            }\r\n          }\r\n        }\r\n\r\n        return {\r\n          k_id: sepc_id,\r\n          k: sku.key,\r\n          v_id: option_id,\r\n          v: sku.value\r\n        }\r\n      })\r\n    }\r\n    return {\r\n      ...skusObj,\r\n      ids: creatIds(skusObj.skus),\r\n\t  data: combInArray(skusObj.skus)\r\n    }\r\n  })\r\n\r\n  const specification = objectValues(specificationObj).map(item => ({\r\n    ...item,\r\n    leaf: objectValues(item.leaf)\r\n  }))\r\n  return {\r\n    productSkus,\r\n    specification\r\n  }\r\n}\r\n","const store = require('store')\r\nimport { param2Data } from '@/components/Sku/sku2param'\r\nimport { addShoppingCart } from '@/api/goodIndent'\r\nexport default{\r\n  name: 'sku',\r\n  props: {\r\n    getList: {\r\n      type: Object,\r\n      default: function(){\r\n        return {};\r\n      }\r\n    },\r\n    cartDetails: {\r\n      type: Object,\r\n      default: function(){\r\n        return {};\r\n      }\r\n    },\r\n    update: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    order: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      cartGood: {\r\n        number: 1,\r\n        price: ''\r\n      },\r\n      specSelected:[],\r\n      SKUResult: {},\r\n      good_sku: {}, //原sku属性\r\n      selectedSku: [], //记录当前所有可以选择的项\r\n      selectedSkuIndex: [[]],\t//获取可选项对应的坐标\r\n      specSelectedIndex: [], //记录选中的坐标\r\n      productSkus: [],\r\n      selectedName: [],\t//已选属性\r\n      noSelectedName: [],\t//未选属性\r\n      specificationDefaultDisplay: {},// 规格默认显示\r\n      specification: [],\r\n      shoppingAttributes: [],\t//购物属性\r\n      getLists:this.getList\r\n    };\r\n  },\r\n  watch: {\r\n    getList(newVal) {\r\n      this.$emit('getList', newVal)\r\n      this.getLists = this.getList\r\n      if(!this.update){\r\n        this.loadData()\r\n      }\r\n    },\r\n    getLists(newVal) {\r\n      this.$emit('getLists', newVal)\r\n\r\n    },\r\n    cartDetails(newVal) {\r\n      this.getLists = newVal.good\r\n      this.initSelectSpec(newVal)\r\n    },\r\n  },\r\n  mounted() {\r\n    this.loadData()\r\n  },\r\n  methods:{\r\n    //获取详情\r\n    loadData() {\r\n      this.selectedSku = []\r\n      // Sku\r\n      if (this.getLists.good_sku.length > 0) {\r\n        const { productSkus, specification } = param2Data(this.getLists.good_sku)\r\n        this.specification = specification\r\n        specification.forEach((item,index)=>{\r\n          this.specSelectedIndex.push(null)\r\n          this.noSelectedName.push(item.value)\r\n          item.leaf.forEach((item2,index2)=>{\r\n            this.selectedSku.push(item2.id)\r\n            this.selectedSkuIndex[item2.id]={\r\n              index: index,\r\n              leaf:index2\r\n            }\r\n          })\r\n        })\r\n        // return false\r\n        this.productSkus = productSkus\r\n        // 获取可选集成\r\n        productSkus.forEach((item,ind)=>{\r\n          item.data.forEach(item2=>{\r\n            item2.sort(function(value1, value2) {\r\n              return parseInt(value1.replace(\"sku\",\"\")) - parseInt(value2.replace(\"sku\",\"\"));\r\n            })\r\n            this.SKUResult[item2.join(\"_\")]=true\r\n          })\r\n        })\r\n        // 规格默认属性\r\n        this.specificationDefaultDisplay = {\r\n          img: this.getLists.resources_many[0].img,\r\n          price_show: this.getLists.price_show,\r\n          inventory_show: this.getLists.inventory_show,\r\n          selected: '选择 ' + this.noSelectedName\r\n        }\r\n        this.$emit('purchasePattern',this.specificationDefaultDisplay)\r\n      }else{\r\n        this.specificationDefaultDisplay = {\r\n          img: this.getLists.resources_many[0].img,\r\n          price_show: this.getLists.price_show,\r\n          inventory_show: this.getLists.inventory_show\r\n        }\r\n        this.cartGood.price = this.getLists.price\r\n      }\r\n      //自动选择默认第一项规格\r\n      if (typeof(this.specification[0].leaf[0]) != 'undefined'){\r\n        for (var i=0;i<this.specification.length;i++){\r\n          this.selectSpec(i, 0,this.specification[i].leaf[0])\r\n        }\r\n      }\r\n    },\r\n    //初始化选中项\r\n    initSelectSpec(newVal){\r\n      this.selectedSku = []\r\n      this.SKUResult = []\r\n      this.cartGood.price = newVal.price\r\n      this.cartGood.number = newVal.number\r\n      this.shoppingAttributes = newVal.good_sku\r\n      this.good_sku = newVal.good_sku\r\n      let checkedId = []\t//选中的ID\r\n      let checkedBrother = []\t//兄弟列表\r\n      // Sku\r\n      if (newVal.good_sku) {\r\n        const { productSkus, specification } = param2Data(this.getLists.good_sku)\r\n        this.specification = specification\r\n        specification.forEach((item,index)=>{\r\n          item.leaf.forEach((item2,index2)=>{\r\n            // 设置选中的值\r\n            for (var i = 0; i < newVal.good_sku.product_sku.length; i++) {\r\n              if(item2.value === newVal.good_sku.product_sku[i].value){\r\n                item.leaf[index2].selected = true\r\n                this.specSelectedIndex[index]=index2\r\n                if(index2 !== null){\r\n                  checkedId.push(specification[index]['leaf'][index2]['id'])\r\n                  checkedBrother.push(index)\r\n                }\r\n                break\r\n              }\r\n            }\r\n            this.selectedSku.push(item2.id)\r\n            this.selectedSkuIndex[item2.id]={\r\n              index: index,\r\n              leaf:index2\r\n            }\r\n          })\r\n        })\r\n\r\n        this.productSkus = productSkus\r\n        // 获取可选集成\r\n        productSkus.forEach((item,ind)=>{\r\n          item.data.forEach(item2=>{\r\n            item2.sort(function(value1, value2) {\r\n              return parseInt(value1.replace(\"sku\",\"\")) - parseInt(value2.replace(\"sku\",\"\"));\r\n            })\r\n            this.SKUResult[item2.join(\"_\")]=true\r\n          })\r\n        })\r\n      }\r\n      this.specificationDefaultDisplay = {\r\n        img: newVal.img,\r\n        price_show: [newVal.good_sku.price],\r\n        inventory_show: newVal.good_sku.inventory,\r\n        selected: '已选 ' + newVal.specification\r\n      }\r\n      // 处理不可选项\r\n      let selectedSkus =JSON.parse(JSON.stringify(this.selectedSku))\r\n      //判断属性是否可选\r\n      let assemblyCache = []\t//组合临时存放\r\n      // 去除选中后的可选项\r\n      selectedSkus.forEach(item=>{\t//选把未选中的和选中的组合，如果是选中兄弟节点，把选中的值移除\r\n        assemblyCache = JSON.parse(JSON.stringify(checkedId))\r\n        assemblyCache.push(item)\r\n        checkedBrother.forEach((item2,index2)=>{\r\n          this.specification[item2].leaf.forEach(item3=>{\r\n            // 和选中行是兄弟关系\r\n            if(item3.id === item){\r\n              assemblyCache.splice(assemblyCache.indexOf(checkedId[index2]),1)\r\n            }\r\n          })\r\n        })\r\n        assemblyCache.sort(function(value1, value2) {\r\n          return parseInt(value1.replace(\"sku\",\"\")) - parseInt(value2.replace(\"sku\",\"\"));\r\n        })\r\n\r\n        // assembly.push(assemblyCache.join(\"_\"))\r\n        // 判断选择项是否在可选集合内\r\n        if(!this.SKUResult[assemblyCache.join(\"_\")]){\r\n          this.specification[this.selectedSkuIndex[item].index].leaf[this.selectedSkuIndex[item].leaf].disabled = true\r\n        }else{\r\n          this.specification[this.selectedSkuIndex[item].index].leaf[this.selectedSkuIndex[item].leaf].disabled = false\r\n        }\r\n      })\r\n    },\r\n    //输入价格\r\n    priceInput: function(event) {\r\n      this.cartGood.price = parseFloat(event.target.value)\r\n    },\r\n    //选择规格\r\n    selectSpec(index, childIndex,res){\r\n      if (res.disabled){\t//不可选的直接返回\r\n        return false\r\n      }\r\n      let chooseAll = false\t//是否选全\r\n      let specification = this.specification\r\n      // 选中的清空\r\n      if (this.specSelectedIndex[index] === childIndex){\t//选择结果相同处理\r\n        this.$set(specification[index]['leaf'][childIndex], 'selected', specification[index]['leaf'][childIndex]['selected'] ? false : true)\r\n        this.specSelectedIndex[index]= null\r\n        // 添加未选择的值\r\n        this.noSelectedName.splice(index,0,specification[index].value)\r\n      } else {\t//选择不同的处理\r\n        if(this.specSelectedIndex[index] !== null){\t//不等于null的时候把同个规格的其它参数设为未选中\r\n          this.$set(specification[index]['leaf'][this.specSelectedIndex[index]], 'selected',false)\r\n        }\r\n\r\n        this.$set(specification[index]['leaf'][childIndex], 'selected', specification[index]['leaf'][childIndex]['selected'] ? false : true)\r\n        this.specSelectedIndex[index]=childIndex\r\n        // this.noSelectedName\r\n        // 删除选中的元素\r\n        this.noSelectedName.forEach((item,indexs)=>{\r\n          if(item === specification[index].value){\r\n            this.noSelectedName.splice(indexs,1)\r\n          }\r\n        })\r\n\r\n      }\r\n\r\n      if(this.noSelectedName.length > 0){\r\n        this.specificationDefaultDisplay = {\r\n          img: this.getLists.resources_many[0].img,\r\n          price_show: this.getLists.price_show,\r\n          inventory_show: this.getLists.inventory_show,\r\n          selected: '选择 ' + this.noSelectedName\r\n        }\r\n        if(!this.update){\r\n          this.$emit('purchasePattern',this.specificationDefaultDisplay)\r\n        }\r\n\r\n      }\r\n      //保存最新选择的位置\r\n\r\n      //存储已选择\r\n      /**\r\n       * 修复选择规格存储错误\r\n       * 将这几行代码替换即可\r\n       * 选择的规格存放在specSelected中\r\n       */\r\n      this.specSelected = []\r\n      let ids = ''\r\n      let checkedId = []\t//选中的ID\r\n      let checkedBrother = []\t//兄弟列表\r\n      let selectedSkus =JSON.parse(JSON.stringify(this.selectedSku))\r\n      this.specSelectedIndex.forEach((item,index)=>{\r\n\r\n        if(item !== null){\r\n          this.specSelected.push(specification[index]['leaf'][item])\r\n          ids += specification[index]['id'] + '-' + specification[index]['leaf'][item]['id'] + '_'\r\n          checkedId.push(specification[index]['leaf'][item]['id'])\r\n          selectedSkus.splice(selectedSkus.indexOf(specification[index]['leaf'][item]['id']),1)\r\n          checkedBrother.push(index)\r\n\r\n          chooseAll = true\r\n        }else {\r\n          chooseAll = false\r\n        }\r\n      })\r\n\r\n      //判断属性是否可选\r\n      let assemblyCache = []\t//组合临时存放\r\n\r\n      // 去除选中后的可选项\r\n      selectedSkus.forEach(item=>{\t//选把未选中的和选中的组合，如果是选中兄弟节点，把选中的值移除\r\n        assemblyCache = JSON.parse(JSON.stringify(checkedId))\r\n        assemblyCache.push(item)\r\n        checkedBrother.forEach((item2,index2)=>{\r\n          this.specification[item2].leaf.forEach(item3=>{\r\n            // 和选中行是兄弟关系\r\n            if(item3.id === item){\r\n              assemblyCache.splice(assemblyCache.indexOf(checkedId[index2]),1)\r\n            }\r\n          })\r\n        })\r\n        assemblyCache.sort(function(value1, value2) {\r\n          return parseInt(value1.replace(\"sku\",\"\")) - parseInt(value2.replace(\"sku\",\"\"));\r\n        })\r\n        // assembly.push(assemblyCache.join(\"_\"))\r\n        // 判断选择项是否在可选集合内\r\n        if(!this.SKUResult[assemblyCache.join(\"_\")]){\r\n          specification[this.selectedSkuIndex[item].index].leaf[this.selectedSkuIndex[item].leaf].disabled = true\r\n        }else{\r\n          specification[this.selectedSkuIndex[item].index].leaf[this.selectedSkuIndex[item].leaf].disabled = false\r\n        }\r\n      })\r\n\r\n\r\n      // console.log(ids.substr(0, ids.length - 1))\r\n      // 选项已选择\r\n      if(chooseAll === true){\r\n        this.cartGood.number = 1\r\n        this.shoppingAttributes = []\r\n        for (var i = 0; i < this.productSkus.length; i++) {\r\n          if(this.productSkus[i].ids === ids.substr(0, ids.length - 1)){\r\n            const specificationDefaultDisplay = this.specificationDefaultDisplay\r\n            const selectedName= []\r\n            this.productSkus[i].skus.forEach(items=>{\r\n              selectedName.push(items.v)\r\n            })\r\n            this.specificationDefaultDisplay = {\r\n              img: this.productSkus[i].resources ? this.productSkus[i].resources.img : this.getLists.resources_many[0].img,\r\n              price_show: [this.productSkus[i].price],\r\n              inventory_show: this.productSkus[i].inventory,\r\n              selected: '已选 ' + selectedName.join(\";\"),\r\n              cost_price: this.productSkus[i].cost_price\r\n            }\r\n            if(!this.update){\r\n              this.$emit('purchasePattern',this.specificationDefaultDisplay)\r\n            }\r\n            this.cartGood.price = this.productSkus[i].price\r\n            this.shoppingAttributes = this.productSkus[i]\r\n            break\r\n          }\r\n        }\r\n      }\r\n    },\r\n    //数量\r\n    numberChange(data){\r\n      this.cartGood.number = data\r\n    },\r\n    //加入购物车\r\n    cart(buyState){\r\n      // 单品或已选规格\r\n      if(this.shoppingAttributes.id > 0 || this.getLists.good_sku.length === 0){\r\n        const tmp = /^\\d+\\.?\\d{0,2}$/\r\n        if (!tmp.test(this.cartGood.price)) {\r\n          this.$message.error('输入的金额有误')\r\n          return false\r\n        }\r\n        this.$emit('toggleSpec')\r\n\r\n        if(this.order){\t//订单更新，直接返回更新后的数据\r\n          // 非SKU商品不允许订单下修改，故不做处理\r\n          if(this.getLists.good_sku.length>0){\r\n            let img = this.getLists.resources_many[0].img\r\n            if(this.shoppingAttributes.resources){\r\n              img = this.shoppingAttributes.resources.img\r\n            }\r\n            let cart={\r\n              id: this.cartDetails.id ? this.cartDetails.id : 0,\r\n              name: this.getLists.name,\r\n              price: this.cartGood.price,\r\n              number: this.cartGood.number,\r\n              good_sku_id:this.shoppingAttributes.id,\r\n              good_id: this.getLists.id,\r\n              good: this.getLists,\r\n              good_sku:this.shoppingAttributes,\r\n              img: img\r\n            }\r\n            this.$emit('setOrder',cart)\r\n          }\r\n\r\n        }else{\r\n          // store.remove(process.env.CACHE_PR + 'CartList')\r\n          let cartList =  store.get(process.env.CACHE_PR + 'CartList') || [];\r\n          let cartMap = new Map()\r\n          if(buyState){\t//直接购买\r\n            cartList = []\r\n          }\r\n          cartList.forEach(item=>{\r\n            cartMap.set(item.good_sku_id,item)\r\n          })\r\n          let img = this.getLists.resources_many[0].img;\r\n          //Sku\r\n          if(this.getLists.good_sku.length>0){\r\n            if(this.shoppingAttributes.resources){\r\n              img = this.shoppingAttributes.resources.img\r\n            }\r\n            if(this.update){ //更新\r\n              // 判断用户是否更改了SKU\r\n              if(this.good_sku.id !== this.shoppingAttributes.id){\r\n                cartMap.delete(this.good_sku.id)\r\n              }\r\n            }\r\n            if(cartMap.get(this.shoppingAttributes.id)){\t//已存在，更新其它属性，增加新添加的数量\r\n              if(this.update){ //更新\r\n                cartMap.get(this.shoppingAttributes.id).number= this.cartGood.number\r\n              }else{\r\n                cartMap.get(this.shoppingAttributes.id).number+= this.cartGood.number\r\n              }\r\n\r\n              //如果购物车商品购买数大于当前库存，将结果改成库存数量\r\n              if(cartMap.get(this.shoppingAttributes.id).number > this.specificationDefaultDisplay.inventory_show){\r\n                cartMap.get(this.shoppingAttributes.id).number = this.specificationDefaultDisplay.inventory_show\r\n              }\r\n              cartMap.get(this.shoppingAttributes.id).price = this.cartGood.price\r\n              cartMap.get(this.shoppingAttributes.id).name = this.getLists.name\r\n              cartMap.get(this.shoppingAttributes.id).good_id = this.getLists.id\r\n              const good = JSON.parse(JSON.stringify(this.getLists))\r\n              delete good.details\r\n              cartMap.get(this.shoppingAttributes.id).good = good\r\n              cartMap.get(this.shoppingAttributes.id).good_sku_id = this.shoppingAttributes.id\r\n              cartMap.get(this.shoppingAttributes.id).good_sku = this.shoppingAttributes\r\n              cartMap.get(this.shoppingAttributes.id).img = img\r\n            }else{\r\n              cartMap.set(this.shoppingAttributes.id,{\r\n                price: this.cartGood.price,\r\n                number: this.cartGood.number,\r\n                name: this.getLists.name,\r\n                good_id: this.getLists.id,\r\n                good: this.getLists,\r\n                good_sku_id:this.shoppingAttributes.id,\r\n                good_sku:this.shoppingAttributes,\r\n                img: img\r\n              })\r\n            }\r\n          }else{\r\n            // 现只有sku商品，故这里不做处理\r\n            if(cartList['good_' + this.getLists.id]){\r\n              if(this.update){ //更新\r\n                cartList['good_' + this.getLists.id].number= this.cartGood.number\r\n              }else{\r\n                cartList['good_' + this.getLists.id].number+= this.cartGood.number\r\n              }\r\n\r\n              //如果购物车商品购买数大于当前库存，将结果改成库存数量\r\n              if(cartList['good_' + this.getLists.id].number > this.getLists.inventory_show){\r\n                cartList['good_' + this.getLists.id].number = this.getLists.inventory_show\r\n              }\r\n              cartList['good_' + this.getLists.id].price = this.cartGood.price\r\n              cartList['good_' + this.getLists.id].name = this.getLists.name\r\n              cartList['good_' + this.getLists.id].good_id = this.getLists.id\r\n              cartList['good_' + this.getLists.id].good = this.getLists\r\n              cartList['good_' + this.getLists.id].img = img\r\n            }else{\r\n              cartList['good_' + this.getLists.id]={\r\n                price: this.cartGood.price,\r\n                number: this.cartGood.number,\r\n                name: this.getLists.name,\r\n                good_id: this.getLists.id,\r\n                good: this.getLists,\r\n                img: img\r\n              }\r\n            }\r\n\r\n          }\r\n\r\n          if(buyState){\t//直接购买\r\n            store.set(process.env.CACHE_PR + 'OrderList', [...cartMap.values()])\r\n          }else{\r\n            // 发送给后台\r\n            addShoppingCart([...cartMap.values()],function(res){\r\n              this.$emit('loadCart') //重载数据\r\n            });\r\n            store.set(process.env.CACHE_PR + 'CartList', [...cartMap.values()])\r\n            $nuxt.$store.commit('setShoppingCartNumber', cartMap.size)\r\n          }\r\n        }\r\n        this.initList()\r\n        if(this.update){ //更新\r\n        }else{\r\n          if(buyState){\t//直接购买\r\n            this.$router.replace('/indent/create')\r\n          }else{\r\n            this.$message({\r\n              message: '成功加入购物车',\r\n              type: 'success'\r\n            })\r\n          }\r\n\r\n        }\r\n\r\n      } else{\r\n        this.$message.error('请选择规格')\r\n      }\r\n\r\n    },\r\n    //初始化\r\n    initList(){\r\n      this.cartGood= {\r\n        number: 1,\r\n        price: ''\r\n      }\r\n\r\n      this.specification = []\r\n      this.specificationDefaultDisplay = []\r\n      this.SKUResult = []\r\n      this.specSelected = []\r\n      this.specSelectedIndex= []\r\n      this.selectedName = []\r\n      this.noSelectedName = []\r\n      this.selectedSku = []\r\n      this.selectedSkuIndex = [[]]\r\n      this.productSkus = []\r\n      this.shoppingAttributes = []\r\n      this.loadData()\r\n    }\r\n  }\r\n}\r\n","export * from \"-!../../node_modules/vue-style-loader/index.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--7-oneOf-1-3!../../node_modules/sass-resources-loader/lib/loader.js??ref--7-oneOf-1-4!../../node_modules/@nuxt/components/dist/loader.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=style&index=0&id=6280261e&lang=scss&scoped=true&\"","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../node_modules/css-loader/dist/runtime/api.js\");\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(false);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".specification-list[data-v-6280261e]{display:flex;margin-top:10px}.specification-list .name[data-v-6280261e]{font-size:12px;line-height:40px;width:80px;text-align:right;color:#999}.specification-list .item-list[data-v-6280261e]{flex:1;display:flex;flex-wrap:wrap}.specification-list .item-list .item[data-v-6280261e]{border:1px solid #e0e0e0;line-height:40px;padding:0 20px;margin-left:10px;margin-bottom:10px;cursor:pointer}.specification-list .item-list .selected[data-v-6280261e]{border:1px solid #fa524c;color:#fa524c}.specification-list .item-list .disabled[data-v-6280261e]{color:#c0c4cc;border:1px solid #c0c4cc}.purchase-quantity[data-v-6280261e]{margin-top:20px;display:flex;line-height:40px}.purchase-quantity .name[data-v-6280261e]{font-size:12px;width:80px;text-align:right;margin-right:10px;color:#999}.purchase-quantity .inventory[data-v-6280261e]{font-size:12px;margin-left:10px}\", \"\"]);\n// Exports\nmodule.exports = ___CSS_LOADER_EXPORT___;\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_vm._ssrNode((_vm._ssrList((_vm.specification),function(item,index){return (\"<div class=\\\"specification-list\\\" data-v-6280261e><div class=\\\"name\\\" data-v-6280261e>\"+_vm._ssrEscape(_vm._s(_vm.$t('hint.error.select', { attribute:item.value })))+\"</div> <div class=\\\"item-list\\\" data-v-6280261e>\"+(_vm._ssrList((item.leaf),function(childItem,childIndex){return (\"<div\"+(_vm._ssrClass(\"item\",{ selected: childItem.selected, disabled: childItem.disabled}))+\" data-v-6280261e>\"+_vm._ssrEscape(\"\\n          \"+_vm._s(childItem.value)+\"\\n        \")+\"</div>\")}))+\"</div></div>\")}))+\" \"),_vm._ssrNode(\"<div class=\\\"purchase-quantity\\\" data-v-6280261e>\",\"</div>\",[_vm._ssrNode(\"<div class=\\\"name\\\" data-v-6280261e>\"+_vm._ssrEscape(_vm._s(_vm.$t('sku.purchase_quantity')))+\"</div> \"),_vm._ssrNode(\"<div class=\\\"quantity\\\" data-v-6280261e>\",\"</div>\",[_c('el-input-number',{attrs:{\"min\":1,\"max\":_vm.getLists.purchase_number ? _vm.getLists.purchase_number : _vm.specificationDefaultDisplay.inventory_show},on:{\"change\":_vm.numberChange},model:{value:(_vm.cartGood.number>_vm.specificationDefaultDisplay.inventory_show?_vm.specificationDefaultDisplay.inventory_show:_vm.cartGood.number),callback:function ($$v) {_vm.$set(_vm.cartGood.number>_vm.specificationDefaultDisplay.inventory_show?_vm.specificationDefaultDisplay.inventory_show:_vm.cartGood, \"number\", $$v)},expression:\"cartGood.number>specificationDefaultDisplay.inventory_show?specificationDefaultDisplay.inventory_show:cartGood.number\"}})],1),_vm._ssrNode(\" <div class=\\\"inventory\\\" data-v-6280261e>\"+_vm._ssrEscape(_vm._s(_vm.$t('good_indent.piece'))+\" (\"+_vm._s(_vm.$t('good.table.inventory'))+\"：\"+_vm._s(_vm.specificationDefaultDisplay.inventory_show)+_vm._s(_vm.$t('good_indent.piece'))+\")\")+\"</div>\")],2)],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport js from './js/index'\r\nexport default js\r\n","import mod from \"-!../../node_modules/babel-loader/lib/index.js??ref--2-0!../../node_modules/@nuxt/components/dist/loader.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/babel-loader/lib/index.js??ref--2-0!../../node_modules/@nuxt/components/dist/loader.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./index.vue?vue&type=template&id=6280261e&scoped=true&\"\nimport script from \"./index.vue?vue&type=script&lang=js&\"\nexport * from \"./index.vue?vue&type=script&lang=js&\"\nfunction injectStyles (context) {\n  \n  var style0 = require(\"./index.vue?vue&type=style&index=0&id=6280261e&lang=scss&scoped=true&\")\nif (style0.__inject__) style0.__inject__(context)\n\n}\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  injectStyles,\n  \"6280261e\",\n  \"4cd39da6\"\n  \n)\n\nexport default component.exports"],"mappingstKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACbA;AAGA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC1fA;AAAA;AAAA;AAAA;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACNA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}