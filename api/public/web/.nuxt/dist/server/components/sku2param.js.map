{"version":3,"file":"components/sku2param.js","sources":["webpack:///./components/Sku/utils.js","webpack:///./plugins/index.js","webpack:///./components/Sku/sku2param.js"],"sourcesContent":["// skus: [{\"k_id\":1,\"k\":\"颜色\",\"v_id\":11,\"v\":\"红色\"},{\"k_id\":2,\"k\":\"尺寸\",\"v_id\":22,\"v\":\"小\"}],\r\n// output：1-11_2-22\r\nexport const creatIds = skus => skus.reduce((total, prev, index) => `${total}${prev.k_id}-${prev.v_id}${index === skus.length - 1 ? '' : '_'}`, '')\r\n\r\n// 计算每个sku后面有多少项\r\nexport function getLevels(tree) {\r\n  const level = []\r\n  for (let i = tree.length - 1; i >= 0; i--) {\r\n    if (tree[i + 1] && tree[i + 1].leaf) {\r\n      level[i] = tree[i + 1].leaf.length * level[i + 1] || 1\r\n    } else {\r\n      level[i] = 1\r\n    }\r\n  }\r\n  return level\r\n}\r\n\r\n/**\r\n * 笛卡尔积运算\r\n * @param  {[type]} tree   [description]\r\n * @param  {Array}  stocks [description]\r\n * @return {[type]}        [description]\r\n */\r\nexport function flatten(tree, stocks = [], options) {\r\n  const { optionValue = 'id', optionText = 'value' } = options || {}\r\n  const result = []\r\n  let skuLen = 0\r\n  const stockMap = {} // 记录已存在的stock的数据\r\n  const level = getLevels(tree)\r\n  if (tree.length === 0) return result\r\n  tree.forEach(sku => {\r\n    const { leaf } = sku\r\n    if (!leaf || leaf.length === 0) return true\r\n    skuLen = (skuLen || 1) * leaf.length\r\n  })\r\n  // 根据已有的stocks生成一个map\r\n  stocks.forEach(stock => {\r\n    const { skus, ...attr } = stock\r\n    stockMap[skus.map(item => `${item.k_id}_${item.v_id}`).join('|')] = attr\r\n  })\r\n  for (let i = 0; i < skuLen; i++) {\r\n    const skus = []\r\n    const mapKey = []\r\n    tree.forEach((sku, column) => {\r\n      const { leaf } = sku\r\n      let item = {}\r\n      if (!leaf || leaf.length === 0) return true\r\n      if (leaf.length > 1) {\r\n        const row = parseInt(i / level[column], 10) % leaf.length\r\n        item = tree[column].leaf[row]\r\n      } else {\r\n        item = tree[column].leaf[0]\r\n      }\r\n      if (!sku[optionValue] || !item[optionValue]) return\r\n      mapKey.push(`${sku[optionValue]}_${item[optionValue]}`)\r\n      skus.push({\r\n        k_id: sku[optionValue],\r\n        k: sku[optionText],\r\n        v_id: item[optionValue],\r\n        v: item[optionText]\r\n      })\r\n    })\r\n    const { ...data } = stockMap[mapKey.join('|')] || {}\r\n    // 从map中找出存在的sku并保留其值\r\n    result.push({ ...data, skus })\r\n  }\r\n  return result\r\n}\r\n\r\n/**\r\n * 判断两个sku是否相同\r\n * @param  {[type]}  prevSKU [description]\r\n * @param  {[type]}  nextSKU [description]\r\n * @return {Boolean}         [description]\r\n */\r\nexport function isEqual(prevSKU, nextSKU, options) {\r\n  const { optionValue = 'id' } = options || {}\r\n  return (\r\n    nextSKU.length === prevSKU.length &&\r\n    nextSKU.every(({ leaf = [] }, index) => {\r\n      const prevLeaf = prevSKU[index].leaf || []\r\n      return (\r\n        prevSKU[index][optionValue] === nextSKU[index][optionValue] &&\r\n        leaf.length === prevLeaf.length &&\r\n        leaf.map(item => item[optionValue]).join(',') ===\r\n          prevLeaf.map(item => item[optionValue]).join(',')\r\n      )\r\n    })\r\n  )\r\n}\r\n\r\n\r\n/**\r\n * 从数组中生成指定长度的组合\r\n * 方法: 先生成[0,1...]形式的数组, 然后根据0,1从原数组取元素，得到组合数组\r\n */\r\nexport function combInArray(aData) {\r\n\tif(!aData || !aData.length) {\r\n\t\treturn [];\r\n\t}\r\n\r\n\tvar len = aData.length;\r\n\tvar aResult = [];\r\n\tvar ids = []\r\n\tfor(var n = 1; n < len; n++) {\r\n\t\tvar aaFlags = getCombFlags(len, n);\r\n\t\t\r\n\t\twhile(aaFlags.length) {\r\n\t\t\tvar aFlag = aaFlags.shift();\r\n\t\t\tvar aComb = [];\r\n\t\t\tfor(var i = 0; i < len; i++) {\r\n\t\t\t\taFlag[i] && aComb.push(aData[i]['v_id']);\r\n\t\t\t}\r\n\t\t\taResult.push(aComb);\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t}\r\n\tfor(var n = 0; n < len; n++) {\r\n\t\tids.push(aData[n].v_id)\r\n\t}\r\n\taResult.push(ids)\r\n\treturn aResult;\r\n}\r\n\r\n\r\n/**\r\n * 得到从 m 元素中取 n 元素的所有组合\r\n * 结果为[0,1...]形式的数组, 1表示选中，0表示不选\r\n */\r\nexport function getCombFlags(m, n) {\r\n\tif(!n || n < 1) {\r\n\t\treturn [];\r\n\t}\r\n\r\n\tvar aResult = [];\r\n\tvar aFlag = [];\r\n\tvar bNext = true;\r\n\tvar i, j, iCnt1;\r\n\r\n\tfor (i = 0; i < m; i++) {\r\n\t\taFlag[i] = i < n ? 1 : 0;\r\n\t}\r\n\r\n\taResult.push(aFlag.concat());\r\n\r\n\twhile (bNext) {\r\n\t\tiCnt1 = 0;\r\n\t\tfor (i = 0; i < m - 1; i++) {\r\n\t\t\tif (aFlag[i] == 1 && aFlag[i+1] == 0) {\r\n\t\t\t\tfor(j = 0; j < i; j++) {\r\n\t\t\t\t\taFlag[j] = j < iCnt1 ? 1 : 0;\r\n\t\t\t\t}\r\n\t\t\t\taFlag[i] = 0;\r\n\t\t\t\taFlag[i+1] = 1;\r\n\t\t\t\tvar aTmp = aFlag.concat();\r\n\t\t\t\taResult.push(aTmp);\r\n\t\t\t\tif(aTmp.slice(-n).join(\"\").indexOf('0') == -1) {\r\n\t\t\t\t\tbNext = false;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\taFlag[i] == 1 && iCnt1++;\r\n\t\t}\r\n\t}\r\n\treturn aResult;\r\n} \r\n","/** +----------------------------------------------------------------------\r\n * | DSSHOP [ 轻量级易扩展低代码开源商城系统 ]\r\n * +----------------------------------------------------------------------\r\n * | Copyright (c) 2020~2023 https://www.dswjcms.com All rights reserved.\r\n * +----------------------------------------------------------------------\r\n * | Licensed 未经许可不能去掉DSSHOP相关版权\r\n * +----------------------------------------------------------------------\r\n * | Author: Purl <383354826@qq.com>\r\n * +----------------------------------------------------------------------\r\n */\r\nexport function createUniqueString() {\r\n\tconst randomNum = parseInt((1 + Math.random()) * 65536) + ''\r\n\treturn (randomNum + new Date().getMilliseconds())\r\n}\r\n","import {\r\n  createUniqueString\r\n} from '../../plugins'\r\nimport {\r\n  creatIds,\r\n  combInArray\r\n} from './utils'\r\n\r\nfunction objectValues(obj) {\r\n    var res = [];\r\n    for (var i in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, i)) {\r\n            res.push(obj[i]);\r\n        }\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function param2Data(product_skus_data) {\r\n  // product_skus_data 数据结构请参考 `/src/components/mock.js`\r\n  if (!product_skus_data || !product_skus_data.length) return\r\n  const specificationObj = {}\r\n\r\n  // 储存所有 spec 的随机生成的 id\r\n  const spec_id_dict = {\r\n    // '颜色': 'xxxid',\r\n    // '皮质': 'xxxid',\r\n  }\r\n\r\n  // 储存所有 option 的随机生成的 id\r\n  const option_id_dict = {\r\n    // '红色': 'xxxid',\r\n    // '绿色': 'xxxid',\r\n    // '蓝色': 'xxxid',\r\n    // '一级皮': 'xxxid',\r\n    // '二级皮': 'xxxid',\r\n    // '三级皮': 'xxxid',\r\n  }\r\n  const productSkus = product_skus_data.map(item => {\r\n    const skusObj = {\r\n      ...item,\r\n      product_sku_id: item.id,\r\n      skus: item.product_sku.map((sku,index) => {\r\n        // const spec_random_id = createUniqueString() + '_id'\r\n        // const option_random_id = createUniqueString() + '_id'\r\n\t\tconst spec_random_id = 'sku' + createUniqueString()\r\n\t\tconst option_random_id = 'sku' + createUniqueString()\r\n        // 加上 if ，防止 dict 里的 id 被覆盖，每次只记录第一次生成的 id\r\n        if (!spec_id_dict[sku.key]) spec_id_dict[sku.key] = spec_random_id\r\n        if (!option_id_dict[sku.value]) option_id_dict[sku.value] = option_random_id\r\n        const sepc_id = spec_id_dict[sku.key]\r\n        const option_id = option_id_dict[sku.value]\r\n\r\n        specificationObj[sku.key] = {\r\n          value: sku.key,\r\n          id: sepc_id,\r\n          leaf: {\r\n            ...(specificationObj[sku.key] ? specificationObj[sku.key].leaf : {}),\r\n            [sku.value]: {\r\n              value: sku.value,\r\n              id: option_id,\r\n\t\t\t  selected: false,\r\n\t\t\t  disabled: false\r\n            }\r\n          }\r\n        }\r\n\r\n        return {\r\n          k_id: sepc_id,\r\n          k: sku.key,\r\n          v_id: option_id,\r\n          v: sku.value\r\n        }\r\n      })\r\n    }\r\n    return {\r\n      ...skusObj,\r\n      ids: creatIds(skusObj.skus),\r\n\t  data: combInArray(skusObj.skus)\r\n    }\r\n  })\r\n\r\n  const specification = objectValues(specificationObj).map(item => ({\r\n    ...item,\r\n    leaf: objectValues(item.leaf)\r\n  }))\r\n  return {\r\n    productSkus,\r\n    specification\r\n  }\r\n}\r\n"],"mappingstKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACbA;AAGA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}